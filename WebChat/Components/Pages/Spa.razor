@page "/Spa"
@using System.Text.Json
@using System.IO
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<style>
    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1rem;
        font-family: sans-serif;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 0.75rem;
        text-align: left;
    }

    th {
        background-color: #f4f4f4;
        font-weight: bold;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    button {
        padding: 0.4rem 0.8rem;
        background-color: #007bff;
        border: none;
        color: white;
        border-radius: 4px;
        cursor: pointer;
    }

        button:hover {
            background-color: #0056b3;
        }

    #Data input {
        margin: 0.5rem 0.5rem 0.5rem 0;
        padding: 0.4rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    #ButtonDiv {
        margin-top: 1rem;
    }
</style>

<div class="container">
    <h3>Gestione Gruppi</h3>

    @if (!isEditing)
    {
        <form @onsubmit="CreateGruppo">
            <input placeholder="Nome" @bind="newNome" required />
            <textarea placeholder="Descrizione" @bind="newDescrizione" rows="1"></textarea>
            <button type="submit">Aggiungi</button>
        </form>
    }
    else
    {
        <form @onsubmit="UpdateGruppo">
            <input placeholder="Nome" @bind="editGruppo.Nome" required />
            <textarea placeholder="Descrizione" @bind="editGruppo.Descrizione" rows="1"></textarea>
            <button type="submit">Salva</button>
            <button type="button" @onclick="CancelEdit" style="background-color:#6c757d; margin-left:0.5rem;">Annulla</button>
        </form>
    }

    <table>
        <thead>
            <tr>
                <th>Id Gruppo</th>
                <th>Nome</th>
                <th>Creazione</th>
                <th>Descrizione</th>
                <th>Azioni</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Gruppo gruppo in gruppi)
            {
                <tr>
                    <td>@gruppo.IdGruppo</td>
                    <td>@gruppo.Nome</td>
                    <td>@gruppo.Creazione.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@gruppo.Descrizione</td>
                    <td class="actions">
                    <td>
                        <button @onclick="() => EditGruppo(gruppo)">
                            <i class="bi bi-globe2"></i>
                        </button><div />
                        <div><button class="delete" @onclick="() => DeleteGruppo(gruppo.IdGruppo)">Elimina</button></div>
                    </td>
                </tr>
            }
            @if (gruppi.Count == 0)
            {
                <tr>
                    <td colspan="5" style="text-align:center; color:#777;">Nessun gruppo disponibile.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public class Gruppo
    {
        public uint IdGruppo { get; set; }
        public DateTime Creazione { get; set; }
        public string Nome { get; set; }
        public string Descrizione { get; set; }

        public Gruppo()
        {
            Creazione = DateTime.Now;
        }
    }

    private List<Gruppo> gruppi = new();
    private uint nextId = 1;

    private string newNome;
    private string newDescrizione;

    private bool isEditing = false;
    private Gruppo editGruppo;

    protected override async Task OnInitializedAsync()
    {
        await LoadGruppi();
    }

    private async Task LoadGruppi()
    {
        if (File.Exists("gruppi.json"))
        {
            var json = await File.ReadAllTextAsync("gruppi.json");
            gruppi = JsonSerializer.Deserialize<List<Gruppo>>(json) ?? new List<Gruppo>();
            nextId = gruppi.Count > 0 ? gruppi.Max(g => g.IdGruppo) + 1 : 1;
        }
    }

    private async Task SaveGruppi()
    {
        var json = JsonSerializer.Serialize(gruppi);
        await File.WriteAllTextAsync("gruppi.json", json);
    }

    private async Task CreateGruppo()
    {
        var gruppo = new Gruppo
            {
                IdGruppo = nextId++,
                Nome = newNome,
                Descrizione = newDescrizione
            };
        gruppi.Add(gruppo);
        newNome = string.Empty;
        newDescrizione = string.Empty;
        await SaveGruppi();
    }

    private void EditGruppo(Gruppo gruppo)
    {
        isEditing = true;
        editGruppo = new Gruppo
            {
                IdGruppo = gruppo.IdGruppo,
                Nome = gruppo.Nome,
                Descrizione = gruppo.Descrizione,
                Creazione = gruppo.Creazione
            };
    }

    private async Task UpdateGruppo()
    {
        var gruppo = gruppi.FirstOrDefault(g => g.IdGruppo == editGruppo.IdGruppo);
        if (gruppo != null)
        {
            gruppo.Nome = editGruppo.Nome;
            gruppo.Descrizione = editGruppo.Descrizione;
        }
        isEditing = false;
        editGruppo = null;
        await SaveGruppi();
    }

    private void CancelEdit()
    {
        isEditing = false;
        editGruppo = null;
    }

    private async Task DeleteGruppo(uint id)
    {
        var gruppo = gruppi.FirstOrDefault(g => g.IdGruppo == id);
        if (gruppo != null)
        {
            gruppi.Remove(gruppo);
            if (isEditing && editGruppo?.IdGruppo == id)
            {
                CancelEdit();
            }
            await SaveGruppi();
        }
    }
}
